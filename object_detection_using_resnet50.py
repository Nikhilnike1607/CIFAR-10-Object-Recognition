# -*- coding: utf-8 -*-
"""Object Detection using ResNet50.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KAhR35ukifiBN6ilSKZKMZRGEaveFlFw
"""

!pip install kaggle

"""**Dataset import through API and Unzipping the Zip file**"""

#configuring path of Json file
!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

#API copied from kaggle
!kaggle competitions download -c cifar-10

!ls

!unzip /content/cifar-10.zip

!ls

#to unzip 7z zip file, install py7zr
!pip install py7zr

import py7zr
archive = py7zr.SevenZipFile('/content/train.7z', mode = 'r')
archive.extractall()
archive.close()

!ls

"""**Import Libraries**"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import os
from PIL import Image
from sklearn.model_selection import train_test_split

filenames = os.listdir('/content/train')

#checking count of train images in the folder/file
len(filenames)

print(filenames[0:10])

df_labels = pd.read_csv('/content/trainLabels.csv')

df_labels.shape

df_labels.head()

df_labels[df_labels['id'] == 22955]

df_labels['label'].value_counts()

label_encode_dict = {'airplane' : 0, 'automobile':1, 'bird': 2, 'cat':3, 'dog' :4, 'deer':5, 'frog':6, 'horse':7, 'ship':8, 'truck':9}
labels = [label_encode_dict[i] for i in df_labels['label']]

print(labels[0:10])

#image processing
import cv2
from google.colab.patches import cv2_imshow

img = cv2.imread('/content/train/13463.png')
cv2_imshow(img)

df_labels[df_labels['id'] == 13463]

id_list = df_labels['id']

df_labels.head()

#converting image to numpy array
train_folder = '/content/train/'
data = []

for i in id_list:
  image = Image.open(train_folder + str(i) + '.png')
  image = np.array(image)
  data.append(image)

type(data)

len(data)

data[0].shape

data[0]

x = np.array(data)
y = np.array(labels)

print(x.shape)
print(y.shape)

"""**Train Test Split**"""

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 2)

print(x.shape, x_train.shape, x_test.shape)

"""**Scaling the data**"""

x_train_scaled = x_train/255
x_test_scaled = x_test/255

x_train_scaled[0]

"""**Neaural Network-- Building layers -- Compiling Neural network with optimizers, loss and metrics -- fit the model**"""

import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import optimizers, losses, metrics

#Building layers in neural network
no_of_classes = 10

model = keras.Sequential([
    keras.layers.Flatten(input_shape = (32,32,3)),
    keras.layers.Dense(64, activation = 'relu'),
    keras.layers.Dense(no_of_classes, activation = 'softmax')
])

model.compile(optimizer = 'adam',
              loss = 'sparse_categorical_crossentropy',
              metrics = ['acc'])

model.fit(x_train_scaled, y_train, validation_split=0.1, epochs= 10)

from tensorflow.keras import Sequential, models, layers, optimizers
from tensorflow.keras import optimizers, losses, metrics
from tensorflow.keras.layers import Flatten, Dense, Dropout, BatchNormalization
from tensorflow.keras.models import load_model, Model
from tensorflow.keras.applications.resnet50 import ResNet50

convolutional_base = ResNet50(weights='imagenet', include_top=False, input_shape=(256,256,3))
convolutional_base.summary()

no_of_classes = 10

model = models.Sequential()
model.add(layers.UpSampling2D((2,2)))
model.add(layers.UpSampling2D((2,2)))
model.add(layers.UpSampling2D((2,2)))
model.add(convolutional_base)
model.add(Flatten())
model.add(BatchNormalization())
model.add(Dense(128, activation = 'relu'))
model.add(Dropout(0.5))
model.add(BatchNormalization())
model.add(Dense(64, activation = 'relu'))
model.add(Dropout(0.5))
model.add(BatchNormalization())
model.add(Dense(no_of_classes, activation = 'relu'))



model.compile(optimizer=optimizers.RMSprop(learning_rate=2e-5),
              loss=losses.sparse_categorical_crossentropy,
              metrics=[metrics.sparse_categorical_accuracy])

history = model.fit(x_train_scaled, y_train, validation_split=0.1, epochs=10)

h=history

#plotting the loss value
plt.plot(h.history['loss'], label='train_loss')
plt.plot(h.history['val_loss'], label='validation loss')
plt.legend()
plt.show()

#plotting the accuracy value
plt.plot(h.history['sparse_categorical_accuracy'], label='train_loss')
plt.plot(h.history['val_sparse_categorical_accuracy'], label='val_sparse_categorical_accuracy')
plt.legend()
plt.show()

"""**Predicting the trained model**"""

input_image_path = input("Please input the image to be predicted")

input_image = cv2.imread(input_image_path)
cv2_imshow(input_image)

input_image_resized = cv2.resize(input_image, (32,32))
input_image_scaled = input_image_resized/255

input_image_reshape = np.reshape(input_image_scaled, (1,32,32,3))
input_prediction = model.predict(input_image_reshape)

print(input_prediction)

input_pred_label = np.argmax(input_prediction)

print(input_pred_label)

if input_pred_label == 0:
  print("----The predicted image is a airplane----")

elif input_pred_label == 1:
  print("----The Predicted Image is a automobile----")

elif input_pred_label == 2:
  print("-----The Predicted Image is a bird-----")

elif input_pred_label == 3:
  print("----The Predicted Image is a cat----")

elif input_pred_label == 4:
  print("----The Predicted Image is a dog----")

elif input_pred_label == 5:
  print("-----The Predicted Image is a deer----")

elif input_pred_label == 6:
  print("-----The Predicted Image is a frog------")

elif input_pred_label == 7:
  print("------The Predicted Image is a horse-----")

elif input_pred_label == 8:
  print("-----The Predicted Image is a ship-----")

elif input_pred_label == 9:
  print("------The Predicted Image is a truck-----")

"""**Saving the trained model**"""

import pickle
file_name = 'Object_detection.sav'
pickle.dump(model, open(file_name, 'wb'))

load_model = pickle.load(open(file_name, 'rb'))

input_image_path = input("Please input the image to be predicted")

input_image = cv2.imread(input_image_path)
cv2_imshow(input_image)

input_image_resized = cv2.resize(input_image, (32,32))
input_image_scaled = input_image_resized/255

input_image_reshape = np.reshape(input_image_scaled, (1,32,32,3))
input_prediction = load_model.predict(input_image_reshape)

print(input_prediction)

input_pred_label = np.argmax(input_prediction)

print(input_pred_label)

if input_pred_label == 0:
  print("----The predicted image is a airplane----")

elif input_pred_label == 1:
  print("----The Predicted Image is a automobile----")

elif input_pred_label == 2:
  print("-----The Predicted Image is a bird-----")

elif input_pred_label == 3:
  print("----The Predicted Image is a cat----")

elif input_pred_label == 4:
  print("----The Predicted Image is a dog----")

elif input_pred_label == 5:
  print("-----The Predicted Image is a deer----")

elif input_pred_label == 6:
  print("-----The Predicted Image is a frog------")

elif input_pred_label == 7:
  print("------The Predicted Image is a horse-----")

elif input_pred_label == 8:
  print("-----The Predicted Image is a ship-----")

elif input_pred_label == 9:
  print("------The Predicted Image is a truck-----")